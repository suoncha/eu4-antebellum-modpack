#Usage:
#var: Variable
#effect: The effect to apply variable to.
#Do not use values > 999,999.999 or < -999,999.999
variable_effect = {
	set_variable = {
		which = num
		which = $var$
	}
	set_variable = {
		which = is_negative
		value = 0
	}
	if = {
		limit = {
			NOT = {
				check_variable = {
					which = num
					value = 0
				}
			}
		}
		set_variable = {
			which = is_negative
			value = 1
		}
		multiply_variable = {
			which = num
			value = -1
		}
	}
	set_variable = {
		which = fraction
		which = num
	}
	set_variable = {
		which = integer
		which = num
	}
	#-1 rounds down, effectively truncating the decimal
	round_variable = {
		which = integer
		value = -1
	}
	subtract_variable = {
		which = fraction
		which = integer
	}
	decimal_decomposition_fractions_effect = {
		var = fraction
		effect = $effect$
		increment = 0.1
	}
	decimal_decomposition_fractions_effect = {
		var = fraction
		effect = $effect$
		increment = 0.01
	}
	decimal_decomposition_fractions_effect = {
		var = fraction
		effect = $effect$
		increment = 0.001
	}
	decimal_decomposition_integers_effect = {
		var = integer
		effect = $effect$
		increment = 1
	}
	decimal_decomposition_integers_effect = {
		var = integer
		effect = $effect$
		increment = 10
	}
	decimal_decomposition_integers_effect = {
		var = integer
		effect = $effect$
		increment = 100
	}
	decimal_decomposition_integers_effect = {
		var = integer
		effect = $effect$
		increment = 1000
	}
	decimal_decomposition_integers_effect = {
		var = integer
		effect = $effect$
		increment = 10000
	}
	decimal_decomposition_integers_effect = {
		var = integer
		effect = $effect$
		increment = 100000
	}
}

decimal_decomposition_integers_effect = {
	if = {
		limit = {
			var_greater_than_0 = {
				var = $var$
			}
		}
		set_variable = {
			which = modulo
			which = $var$
		}
		modulo_variable = {
			which = modulo
			value = 10
		}
		divide_variable = {
			which = $var$
			value = 10
		}
		#-1 rounds down, effectively truncating the decimal
		round_variable = {
			which = $var$
			value = -1
		}
		while = {
			limit = {
				check_variable = {
					which = modulo
					value = 1
				}
			}
			if = {
				limit = {
					check_variable = {
						which = is_negative
						value = 1
					}
				}
				$effect$ = -$increment$
			}
			else = {
				$effect$ = $increment$
			}
			subtract_variable = {
				which = modulo
				value = 1
			}
		}
	}
}

decimal_decomposition_fractions_effect = {
	if = {
		limit = {
			var_greater_than_0 = {
				var = $var$
			}
		}
		multiply_variable = {
			which = $var$
			value = 10
		}
		set_variable = {
			which = temp_fraction
			which = $var$
		}
		set_variable = {
			which = temp_integer
			which = $var$
		}
		#-1 rounds down, effectively truncating the decimal
		round_variable = {
			which = temp_integer
			value = -1
		}
		subtract_variable = {
			which = $var$
			which = temp_integer
		}
		while = {
			limit = {
				check_variable = {
					which = temp_integer
					value = 1
				}
			}
			if = {
				limit = {
					check_variable = {
						which = is_negative
						value = 1
					}
				}
				$effect$ = -$increment$
			}
			else = {
				$effect$ = $increment$
			}
			subtract_variable = {
				which = temp_integer
				value = 1
			}
		}
	}
}

#Usage:
#var - The variable to use as the duration. Negative values produce who fucking knows effects.
#modifier - The modifier to apply
variable_province_modifier = {
	set_variable = {
		which = num
		which = $var$
	}
	#-1 rounds down, effectively truncating the decimal
	round_variable = {
		which = num
		value = -1
	}
	add_province_modifier = {
		name = $modifier$
		duration = 1
	}
	subtract_variable = {
		which = num
		value = 1
	}
	decimal_decomposition_extend_modifier_effect = {
		var = num
		modifier = $modifier$
		increment = 1
	}
	decimal_decomposition_extend_modifier_effect = {
		var = num
		modifier = $modifier$
		increment = 10
	}
	decimal_decomposition_extend_modifier_effect = {
		var = num
		modifier = $modifier$
		increment = 100
	}
	decimal_decomposition_extend_modifier_effect = {
		var = num
		modifier = $modifier$
		increment = 1000
	}
	decimal_decomposition_extend_modifier_effect = {
		var = num
		modifier = $modifier$
		increment = 10000
	}
	decimal_decomposition_extend_modifier_effect = {
		var = num
		modifier = $modifier$
		increment = 100000
	}
}

decimal_decomposition_extend_modifier_effect = {
	if = {
		limit = {
			var_greater_than_0 = {
				var = $var$
			}
		}
		set_variable = {
			which = modulo
			which = $var$
		}
		modulo_variable = {
			which = modulo
			value = 10
		}
		divide_variable = {
			which = $var$
			value = 10
		}
		#-1 rounds down, effectively truncating the decimal
		round_variable = {
			which = $var$
			value = -1
		}
		while = {
			limit = {
				check_variable = {
					which = modulo
					value = 1
				}
			}
			extend_province_modifier = {
				name = $modifier$
				duration = $increment$
			}
			subtract_variable = {
				which = modulo
				value = 1
			}
		}
	}
}

#Allows you to add or remove government power using the value of a given variable.
#
#---Usage---
#var: The variable in which you want to take the value and add/remove government power. Positive values add government power, negative values subtract.
#mechanic_type: The government mechanic you are doing this for. E.g., Militarization Mechanic (Prussia)
#power_type: The government power type you wish to add. E.g., Militarization of Country
#scaled_with_gain_modifier: Should the amount of government power added scale with the associated modifier? Accepted values: (yes/no)
#
#!!! Do not use values > 999,999.999 or < -999,999.999 !!!
variable_government_power_effect = {
	set_variable = {
		which = num
		which = $var$
	}
	set_variable = {
		which = is_negative
		value = 0
	}
	if = {
		limit = {
			NOT = {
				check_variable = {
					which = num
					value = 0
				}
			}
		}
		set_variable = {
			which = is_negative
			value = 1
		}
		multiply_variable = {
			which = num
			value = -1
		}
	}
	set_variable = {
		which = fraction
		which = num
	}
	set_variable = {
		which = integer
		which = num
	}
	#-1 rounds down, effectively truncating the decimal
	round_variable = {
		which = integer
		value = -1
	}
	subtract_variable = {
		which = fraction
		which = integer
	}
	decimal_decomposition_fractions_government_power_effect = {
		var = fraction
		mechanic_type = $mechanic_type$
		power_type = $power_type$
		scaled_with_gain_modifier = $scaled_with_gain_modifier$
		increment = 0.1
	}
	decimal_decomposition_fractions_government_power_effect = {
		var = fraction
		mechanic_type = $mechanic_type$
		power_type = $power_type$
		scaled_with_gain_modifier = $scaled_with_gain_modifier$
		increment = 0.01
	}
	decimal_decomposition_fractions_government_power_effect = {
		var = fraction
		mechanic_type = $mechanic_type$
		power_type = $power_type$
		scaled_with_gain_modifier = $scaled_with_gain_modifier$
		increment = 0.001
	}
	decimal_decomposition_integers_government_power_effect = {
		var = integer
		mechanic_type = $mechanic_type$
		power_type = $power_type$
		scaled_with_gain_modifier = $scaled_with_gain_modifier$
		increment = 1
	}
	decimal_decomposition_integers_government_power_effect = {
		var = integer
		mechanic_type = $mechanic_type$
		power_type = $power_type$
		scaled_with_gain_modifier = $scaled_with_gain_modifier$
		increment = 10
	}
	decimal_decomposition_integers_government_power_effect = {
		var = integer
		mechanic_type = $mechanic_type$
		power_type = $power_type$
		scaled_with_gain_modifier = $scaled_with_gain_modifier$
		increment = 100
	}
	decimal_decomposition_integers_government_power_effect = {
		var = integer
		mechanic_type = $mechanic_type$
		power_type = $power_type$
		scaled_with_gain_modifier = $scaled_with_gain_modifier$
		increment = 1000
	}
	decimal_decomposition_integers_government_power_effect = {
		var = integer
		mechanic_type = $mechanic_type$
		power_type = $power_type$
		scaled_with_gain_modifier = $scaled_with_gain_modifier$
		increment = 10000
	}
	decimal_decomposition_integers_government_power_effect = {
		var = integer
		mechanic_type = $mechanic_type$
		power_type = $power_type$
		scaled_with_gain_modifier = $scaled_with_gain_modifier$
		increment = 100000
	}
}

decimal_decomposition_fractions_government_power_effect = {
	if = {
		limit = {
			var_greater_than_0 = {
				var = $var$
			}
		}
		multiply_variable = {
			which = $var$
			value = 10
		}
		set_variable = {
			which = temp_fraction
			which = $var$
		}
		set_variable = {
			which = temp_integer
			which = $var$
		}
		#-1 rounds down, effectively truncating the decimal
		round_variable = {
			which = temp_integer
			value = -1
		}
		subtract_variable = {
			which = $var$
			which = temp_integer
		}
		while = {
			limit = {
				check_variable = {
					which = temp_integer
					value = 1
				}
			}
			if = {
				limit = {
					check_variable = {
						which = is_negative
						value = 1
					}
				}
				add_government_power = {
					mechanic_type = $mechanic_type$
					power_type = $power_type$
					scaled_with_gain_modifier = $scaled_with_gain_modifier$
					value = -$increment$
				}
			}
			else = {
				add_government_power = {
					mechanic_type = $mechanic_type$
					power_type = $power_type$
					scaled_with_gain_modifier = $scaled_with_gain_modifier$
					value = $increment$
				}
			}
			subtract_variable = {
				which = temp_integer
				value = 1
			}
		}
	}
}

decimal_decomposition_integers_government_power_effect = {
	if = {
		limit = {
			var_greater_than_0 = {
				var = $var$
			}
		}
		set_variable = {
			which = modulo
			which = $var$
		}
		modulo_variable = {
			which = modulo
			value = 10
		}
		divide_variable = {
			which = $var$
			value = 10
		}
		#-1 rounds down, effectively truncating the decimal
		round_variable = {
			which = $var$
			value = -1
		}
		while = {
			limit = {
				check_variable = {
					which = modulo
					value = 1
				}
			}
			if = {
				limit = {
					check_variable = {
						which = is_negative
						value = 1
					}
				}
				add_government_power = {
					mechanic_type = $mechanic_type$
					power_type = $power_type$
					scaled_with_gain_modifier = $scaled_with_gain_modifier$
					value = -$increment$
				}
			}
			else = {
				add_government_power = {
					mechanic_type = $mechanic_type$
					power_type = $power_type$
					scaled_with_gain_modifier = $scaled_with_gain_modifier$
					value = $increment$
				}
			}
			subtract_variable = {
				which = modulo
				value = 1
			}
		}
	}
}

variable_add_agressive_expansion = {
	set_variable = {
		which = num
		which = $var$
	}
	set_variable = {
		which = is_negative
		value = 0
	}
	if = {
		limit = {
			NOT = {
				check_variable = {
					which = num
					value = 0
				}
			}
		}
		set_variable = {
			which = is_negative
			value = 1
		}
		multiply_variable = {
			which = num
			value = -1
		}
	}
	#-1 rounds down, effectively truncating the decimal
	round_variable = {
		which = num
		value = -1
	}
	decimal_decomposition_integers_add_agressive_expansion_effect = {
		var = num
		who = $who$
		apply_calc = $apply_calc$
		increment = 1
	}
	decimal_decomposition_integers_add_agressive_expansion_effect = {
		var = num
		who = $who$
		apply_calc = $apply_calc$
		increment = 10
	}
	decimal_decomposition_integers_add_agressive_expansion_effect = {
		var = num
		who = $who$
		apply_calc = $apply_calc$
		increment = 100
	}
	decimal_decomposition_integers_add_agressive_expansion_effect = {
		var = num
		who = $who$
		apply_calc = $apply_calc$
		increment = 1000
	}
	decimal_decomposition_integers_add_agressive_expansion_effect = {
		var = num
		who = $who$
		apply_calc = $apply_calc$
		increment = 10000
	}
	decimal_decomposition_integers_add_agressive_expansion_effect = {
		var = num
		who = $who$
		apply_calc = $apply_calc$
		increment = 100000
	}
}

decimal_decomposition_integers_add_agressive_expansion_effect = {
	if = {
		limit = {
			var_greater_than_0 = {
				var = $var$
			}
		}
		set_variable = {
			which = modulo
			which = $var$
		}
		modulo_variable = {
			which = modulo
			value = 10
		}
		divide_variable = {
			which = $var$
			value = 10
		}
		#-1 rounds down, effectively truncating the decimal
		round_variable = {
			which = $var$
			value = -1
		}
		while = {
			limit = {
				check_variable = {
					which = modulo
					value = 1
				}
			}
			if = {
				limit = {
					check_variable = {
						which = is_negative
						value = 1
					}
				}
				add_aggressive_expansion = {
					who = $who$
					value = -$increment$
					apply_calc = $apply_calc$
				}
			}
			else = {
				add_aggressive_expansion = {
					who = $who$
					value = $increment$
					apply_calc = $apply_calc$
				}
			}
			subtract_variable = {
				which = modulo
				value = 1
			}
		}
	}
}

#Note: It's highly recommended that you use an opinion modifier with an opinion value of +/- 1
variable_add_opinion = {
	set_variable = {
		which = count
		which = $var$
	}
	round_variable = {
		which = countr
		value = 1
	}
	while = {
		limit = {
			check_variable = {
				which = count
				value = 1
			}
		}
		add_opinion = {
			who = $who$
			modifier = $modifier$
			[[years]
			years = $years$
			]
			[[months]
			months = $months$
			]
			[[multiplier]
			multiplier = $multiplier$
			]
		}
		subtract_variable = {
			which = count
			value = 1
		}
	}
}

#Usage:
#var: Variable
#Do not use values > 999,999.999 or < -999,999.999
variable_add_prestige_or_monarch_power = {
	set_variable = {
		which = num
		which = $var$
	}
	set_variable = {
		which = is_negative
		value = 0
	}
	if = {
		limit = {
			NOT = {
				check_variable = {
					which = num
					value = 0
				}
			}
		}
		set_variable = {
			which = is_negative
			value = 1
		}
		multiply_variable = {
			which = num
			value = -1
		}
	}
	while = {
		limit = {
			check_variable = {
				which = num
				value = 1
			}
		}
		if = {
			limit = {
				is_variable_equal = {
					which = is_negative
					value = 1
				}
			}
			add_prestige_or_monarch_power = {
				amount = -1
			}
		}
		else = {
			add_prestige_or_monarch_power = {
				amount = 1
			}
		}
		subtract_variable = {
			which = num
			value = 1
		}
	}
}

#Usage:
#Scope: Country
#var: Variable
#estate: The estate to give or take crownland from
#Do not use values > +100.000 or < -100.000
variable_change_estate_land_share = {
	set_variable = {
		which = num
		which = $var$
	}
	set_variable = {
		which = is_negative
		value = 0
	}
	if = {
		limit = {
			NOT = {
				check_variable = {
					which = num
					value = 0
				}
			}
		}
		set_variable = {
			which = is_negative
			value = 1
		}
		multiply_variable = {
			which = num
			value = -1
		}
	}
	set_variable = {
		which = fraction
		which = num
	}
	set_variable = {
		which = integer
		which = num
	}
	#-1 rounds down, effectively truncating the decimal
	round_variable = {
		which = integer
		value = -1
	}
	subtract_variable = {
		which = fraction
		which = integer
	}
	change_estate_land_share_fraction_effect = {
		var = fraction
		estate = $estate$
		increment = 0.1
	}
	change_estate_land_share_fraction_effect = {
		var = fraction
		estate = $estate$
		increment = 0.01
	}
	change_estate_land_share_fraction_effect = {
		var = fraction
		estate = $estate$
		increment = 0.001
	}
	change_estate_land_share_integer_effect = {
		var = integer
		estate = $estate$
		increment = 1
	}
	change_estate_land_share_integer_effect = {
		var = integer
		estate = $estate$
		increment = 10
	}
	change_estate_land_share_integer_effect = {
		var = integer
		estate = $estate$
		increment = 100
	}
}

change_estate_land_share_integer_effect = {
	if = {
		limit = {
			var_greater_than_0 = {
				var = $var$
			}
		}
		set_variable = {
			which = modulo
			which = $var$
		}
		modulo_variable = {
			which = modulo
			value = 10
		}
		divide_variable = {
			which = $var$
			value = 10
		}
		#-1 rounds down, effectively truncating the decimal
		round_variable = {
			which = $var$
			value = -1
		}
		while = {
			limit = {
				check_variable = {
					which = modulo
					value = 1
				}
			}
			if = {
				limit = {
					check_variable = {
						which = is_negative
						value = 1
					}
				}
				change_estate_land_share = {
					estate = $estate$
					share = -$increment$
				}
			}
			else = {
				change_estate_land_share = {
					estate = $estate$
					share = $increment$
				}
			}
			subtract_variable = {
				which = modulo
				value = 1
			}
		}
	}
}

change_estate_land_share_fraction_effect = {
	if = {
		limit = {
			var_greater_than_0 = {
				var = $var$
			}
		}
		multiply_variable = {
			which = $var$
			value = 10
		}
		set_variable = {
			which = temp_fraction
			which = $var$
		}
		set_variable = {
			which = temp_integer
			which = $var$
		}
		#-1 rounds down, effectively truncating the decimal
		round_variable = {
			which = temp_integer
			value = -1
		}
		subtract_variable = {
			which = $var$
			which = temp_integer
		}
		while = {
			limit = {
				check_variable = {
					which = temp_integer
					value = 1
				}
			}
			if = {
				limit = {
					check_variable = {
						which = is_negative
						value = 1
					}
				}
				change_estate_land_share = {
					estate = $estate$
					share = -$increment$
				}
			}
			else = {
				change_estate_land_share = {
					estate = $estate$
					share = $increment$
				}
			}
			subtract_variable = {
				which = temp_integer
				value = 1
			}
		}
	}
}
